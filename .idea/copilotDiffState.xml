<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/FretboardUi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/FretboardUi.kt" />
              <option name="originalContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.graphics.nativeCanvas&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import kotlin.math.min&#10;&#10;// 다이어그램 관련 컴포저블 정리 파일&#10;&#10;@Composable&#10;fun FretDiagramImage() {&#10;    Canvas(modifier = Modifier.size(100.dp)) {&#10;        // horizontal frets&#10;        for (i in 0..4) {&#10;            drawLine(Color.Black, start = Offset(0f, i * 20f), end = Offset(100f, i * 20f), strokeWidth = 2f)&#10;        }&#10;        // vertical strings&#10;        for (i in 0..4) {&#10;            drawLine(Color.Black, start = Offset(i * 25f, 0f), end = Offset(i * 25f, 80f), strokeWidth = 2f)&#10;        }&#10;        // sample dots&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(25f, 40f))&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(50f, 20f))&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(75f, 60f))&#10;        // nut&#10;        drawRect(Color.Black, topLeft = Offset(0f, 0f), size = androidx.compose.ui.geometry.Size(15f, 80f))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FretboardDiagram(&#10;    chordName: String,&#10;    positions: List&lt;Int&gt;, // stringCount 길이: -1=mute, 0=open, n&gt;0 fret number&#10;    fingers: List&lt;Int&gt;? = null, // same length, 0=hide&#10;    modifier: Modifier = Modifier,&#10;    uiParams: DiagramUiParams = DefaultDiagramUiParams,&#10;    firstFretIsNut: Boolean = true,&#10;    diagramWidth: Dp? = null,&#10;    diagramHeight: Dp? = null&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .background(Color.White, RoundedCornerShape(12.dp))&#10;            .padding(8.dp),&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Text(chordName, fontWeight = FontWeight.Bold, fontSize = 18.sp, color = Color(0xFF31455A), modifier = Modifier.padding(bottom = 6.dp))&#10;&#10;        // Use BoxWithConstraints so we can draw grid in Canvas and overlay Compose markers (Text in colored Boxes)&#10;        // Use BoxWithConstraints so we can draw grid in Canvas and overlay Compose markers (Text in colored Boxes)&#10;        val defaultWidth = diagramWidth ?: 200.dp&#10;        val defaultHeight = diagramHeight ?: 120.dp&#10;        val boxModifier = Modifier.width(defaultWidth).height(defaultHeight).then(modifier) // caller modifier (if contains size) will override defaults&#10;        BoxWithConstraints(&#10;            modifier = boxModifier,&#10;            contentAlignment = Alignment.TopStart&#10;        ) {&#10;            val boxW = maxWidth&#10;            val boxH = maxHeight&#10;            val density = LocalDensity.current&#10;            val boxWpx = with(density) { boxW.toPx() }&#10;            val boxHpx = with(density) { boxH.toPx() }&#10;            val leftInsetPx = with(density) { uiParams.leftInsetDp.toPx() }&#10;            val openOffsetPx = with(density) { uiParams.openMarkerOffsetDp.toPx() }&#10;            val computedNutPx = uiParams.nutWidthDp?.let { with(density) { it.toPx() } } ?: (boxWpx * uiParams.nutWidthFactor)&#10;            val nutPx = if (firstFretIsNut) computedNutPx else 0f&#10;            val fretCount = 5&#10;            val stringCount = 6&#10;            // available width for frets = total width - leftInset - nut width&#10;            val availableWidth = (boxWpx - leftInsetPx - nutPx).coerceAtLeast(0f)&#10;            val fretSpacingPx = if (fretCount &gt; 0) availableWidth / fretCount else 0f&#10;            val stringSpacingPx = if (stringCount &gt; 1) boxHpx / (stringCount - 1) else boxHpx&#10;&#10;            Canvas(modifier = Modifier.matchParentSize()) {&#10;                // background&#10;                drawRect(Color.White, size = size)&#10;                // nut or vertical frets (shifted by leftInset)&#10;                for (f in 0..fretCount) {&#10;                    if (f == 0 &amp;&amp; firstFretIsNut) {&#10;                        drawRect(Color.Black, topLeft = Offset(leftInsetPx, 0f), size = androidx.compose.ui.geometry.Size(nutPx, size.height))&#10;                    } else {&#10;                        val x = leftInsetPx + nutPx + f * fretSpacingPx&#10;                        drawLine(Color.Gray, start = Offset(x, 0f), end = Offset(x, size.height), strokeWidth = with(density) { uiParams.verticalLineWidthDp.toPx() })&#10;                    }&#10;                }&#10;                // horizontal strings (start after leftInset)&#10;                for (s in 0 until stringCount) {&#10;                    val y = s * stringSpacingPx&#10;                    drawLine(Color.Gray, start = Offset(leftInsetPx, y), end = Offset(size.width, y), strokeWidth = with(density) { uiParams.horizontalLineWidthDp.toPx() })&#10;                }&#10;&#10;                // draw markers (circles + finger numbers) directly on Canvas for pixel-perfect positioning&#10;                positions.forEachIndexed { stringIdx, fretNum -&gt;&#10;                    val y = (stringCount - 1 - stringIdx) * stringSpacingPx&#10;                    when {&#10;                        fretNum &gt; 0 -&gt; {&#10;                            val x = leftInsetPx + nutPx + (fretNum - 0.5f) * fretSpacingPx&#10;                            // marker radius derived from UI params&#10;                            val radius = min(fretSpacingPx, stringSpacingPx) * uiParams.markerRadiusFactor&#10;                            drawCircle(color = Color(0xFF339CFF), center = Offset(x, y), radius = radius)&#10;                            val finger = fingers?.getOrNull(stringIdx) ?: 0&#10;                            if (finger &gt; 0) {&#10;                                // draw centered text using nativeCanvas&#10;                                drawContext.canvas.nativeCanvas.apply {&#10;                                    val paint = android.graphics.Paint().apply {&#10;                                        color = android.graphics.Color.WHITE&#10;                                        textSize = radius * uiParams.markerTextScale&#10;                                        isFakeBoldText = true&#10;                                        textAlign = android.graphics.Paint.Align.CENTER&#10;                                    }&#10;                                    val baseline = y + (paint.descent() - paint.ascent()) / 2 - paint.descent()&#10;                                    drawText(finger.toString(), x, baseline, paint)&#10;                                }&#10;                            }&#10;                        }&#10;                        fretNum == 0 -&gt; {&#10;                            // open string: draw outside left of nut (white fill + black stroke to be visible)&#10;                            val x = leftInsetPx - openOffsetPx&#10;                            val radius = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                            // filled white circle&#10;                            drawCircle(color = Color.White, center = Offset(x, y), radius = radius)&#10;                            // black stroke outline&#10;                            drawCircle(color = Color.Black, center = Offset(x, y), radius = radius, style = androidx.compose.ui.graphics.drawscope.Stroke(width = with(density) { uiParams.horizontalLineWidthDp.toPx() }))&#10;                        }&#10;                        fretNum &lt; 0 -&gt; {&#10;                            // mute: draw an X symbol outside left of nut using two diagonal lines&#10;                            val x = leftInsetPx - openOffsetPx&#10;                            val size = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                            val half = size / 2f&#10;                            val strokeW = with(density) { uiParams.horizontalLineWidthDp.toPx() }&#10;                            drawLine(Color.Black, start = Offset(x - half, y - half), end = Offset(x + half, y + half), strokeWidth = strokeW)&#10;                            drawLine(Color.Black, start = Offset(x - half, y + half), end = Offset(x + half, y - half), strokeWidth = strokeW)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FretboardDiagramOnly(&#10;    modifier: Modifier = Modifier,&#10;    uiParams: DiagramUiParams = DefaultDiagramUiParams,&#10;    stringStrokeWidthDp: Dp? = null,&#10;    positions: List&lt;Int&gt;? = null,&#10;    fingers: List&lt;Int&gt;? = null,&#10;    firstFretIsNut: Boolean = true&#10;) {&#10;    // Small variant: fills given modifier size&#10;    BoxWithConstraints(modifier = modifier, contentAlignment = Alignment.Center) {&#10;        val density = LocalDensity.current&#10;        val boxWpx = with(density) { maxWidth.toPx() }&#10;        val boxHpx = with(density) { maxHeight.toPx() }&#10;        val leftInsetPx = with(density) { uiParams.leftInsetDp.toPx() }&#10;        val openOffsetPx = with(density) { uiParams.openMarkerOffsetDp.toPx() }&#10;        val computedNutPx = uiParams.nutWidthDp?.let { with(density) { it.toPx() } } ?: (boxWpx * uiParams.nutWidthFactor)&#10;        val nutPx = if (firstFretIsNut) computedNutPx else 0f&#10;        val fretCount = 5&#10;        val stringCount = 6&#10;        val availableWidth = (boxWpx - leftInsetPx - nutPx).coerceAtLeast(0f)&#10;        val fretSpacingPx = if (fretCount &gt; 0) availableWidth / fretCount else 0f&#10;        val stringSpacingPx = if (stringCount &gt; 1) boxHpx / (stringCount - 1) else boxHpx&#10;&#10;        Canvas(modifier = Modifier.matchParentSize()) {&#10;             drawRect(Color.White, size = size)&#10;             for (f in 0..fretCount) {&#10;                 if (f == 0 &amp;&amp; firstFretIsNut) drawRect(Color.Black, topLeft = Offset(leftInsetPx, 0f), size = androidx.compose.ui.geometry.Size(nutPx, size.height))&#10;                 else {&#10;                     val x = leftInsetPx + nutPx + f * fretSpacingPx&#10;                     drawLine(Color.Black, start = Offset(x, 0f), end = Offset(x, size.height), strokeWidth = with(density) { uiParams.verticalLineWidthDp.toPx() })&#10;                 }&#10;             }&#10;              for (s in 0 until stringCount) {&#10;                  val y = s * stringSpacingPx&#10;                 drawLine(Color.Black, start = Offset(leftInsetPx, y), end = Offset(size.width, y), strokeWidth = stringStrokeWidthDp?.let { with(density) { it.toPx() } } ?: with(density) { uiParams.horizontalLineWidthDp.toPx() })&#10;              }&#10;&#10;             // draw markers directly on canvas (positions indexed low-&gt;high strings: [6th..1st])&#10;             positions?.let { posList -&gt;&#10;                 posList.forEachIndexed { si, fn -&gt;&#10;                     val y = (stringCount - 1 - si) * stringSpacingPx&#10;                     when {&#10;                         fn &gt; 0 -&gt; {&#10;                             val x = leftInsetPx + nutPx + (fn - 0.5f) * fretSpacingPx&#10;                             val radius = min(fretSpacingPx, stringSpacingPx) * uiParams.markerRadiusFactor&#10;                             drawCircle(color = Color(0xFF339CFF), center = Offset(x, y), radius = radius)&#10;                             val finger = fingers?.getOrNull(si) ?: 0&#10;                             if (finger &gt; 0) {&#10;                                 drawContext.canvas.nativeCanvas.apply {&#10;                                     val paint = android.graphics.Paint().apply {&#10;                                         color = android.graphics.Color.WHITE&#10;                                         textSize = radius * uiParams.markerTextScale&#10;                                         isFakeBoldText = true&#10;                                         textAlign = android.graphics.Paint.Align.CENTER&#10;                                     }&#10;                                     val baseline = y + (paint.descent() - paint.ascent()) / 2 - paint.descent()&#10;                                     drawText(finger.toString(), x, baseline, paint)&#10;                                 }&#10;                             }&#10;                         }&#10;                         fn == 0 -&gt; {&#10;                             val x = leftInsetPx - openOffsetPx&#10;                             val radius = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                             // filled white circle&#10;                             drawCircle(color = Color.White, center = Offset(x, y), radius = radius)&#10;                             // black stroke outline&#10;                             drawCircle(color = Color.Black, center = Offset(x, y), radius = radius, style = androidx.compose.ui.graphics.drawscope.Stroke(width = with(density) { uiParams.horizontalLineWidthDp.toPx() }))&#10;                         }&#10;                         fn &lt; 0 -&gt; {&#10;                             val x = leftInsetPx - openOffsetPx&#10;                             val size = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                             val half = size / 2f&#10;                             val strokeW = with(density) { uiParams.horizontalLineWidthDp.toPx() }&#10;                             drawLine(Color.Black, start = Offset(x - half, y - half), end = Offset(x + half, y + half), strokeWidth = strokeW)&#10;                             drawLine(Color.Black, start = Offset(x - half, y + half), end = Offset(x + half, y - half), strokeWidth = strokeW)&#10;                         }&#10;                     }&#10;                 }&#10;             }&#10;         }&#10;     }&#10; }&#10;&#10;@Preview(name = &quot;Fretboard Card Preview (single)&quot;, showBackground = true, widthDp = 360, heightDp = 240)&#10;@Composable&#10;fun PreviewFretboardCard_Single() {&#10;    val previewParams = DefaultDiagramUiParams.copy(nutWidthFactor = 0.06f)&#10;    Box(modifier = Modifier.fillMaxSize().padding(12.dp), contentAlignment = Alignment.TopCenter) {&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = previewParams&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.material3.Text&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.graphics.nativeCanvas&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import kotlin.math.min&#10;&#10;// 다이어그램 관련 컴포저블 정리 파일&#10;&#10;@Composable&#10;fun FretDiagramImage() {&#10;    Canvas(modifier = Modifier.size(100.dp)) {&#10;        // horizontal frets&#10;        for (i in 0..4) {&#10;            drawLine(Color.Black, start = Offset(0f, i * 20f), end = Offset(100f, i * 20f), strokeWidth = 2f)&#10;        }&#10;        // vertical strings&#10;        for (i in 0..4) {&#10;            drawLine(Color.Black, start = Offset(i * 25f, 0f), end = Offset(i * 25f, 80f), strokeWidth = 2f)&#10;        }&#10;        // sample dots&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(25f, 40f))&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(50f, 20f))&#10;        drawCircle(Color.Black, radius = 7f, center = Offset(75f, 60f))&#10;        // nut&#10;        drawRect(Color.Black, topLeft = Offset(0f, 0f), size = androidx.compose.ui.geometry.Size(15f, 80f))&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FretboardDiagram(&#10;    chordName: String,&#10;    positions: List&lt;Int&gt;, // stringCount 길이: -1=mute, 0=open, n&gt;0 fret number&#10;    fingers: List&lt;Int&gt;? = null, // same length, 0=hide&#10;    modifier: Modifier = Modifier,&#10;    uiParams: DiagramUiParams = DefaultDiagramUiParams,&#10;    firstFretIsNut: Boolean = true,&#10;    diagramWidth: Dp? = null,&#10;    diagramHeight: Dp? = null&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .background(Color.White, RoundedCornerShape(12.dp))&#10;            .padding(8.dp),&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Text(chordName, fontWeight = FontWeight.Bold, fontSize = 18.sp, color = Color(0xFF31455A), modifier = Modifier.padding(bottom = 6.dp))&#10;&#10;        // Use BoxWithConstraints so we can draw grid in Canvas and overlay Compose markers (Text in colored Boxes)&#10;        // Use BoxWithConstraints so we can draw grid in Canvas and overlay Compose markers (Text in colored Boxes)&#10;        val defaultWidth = diagramWidth ?: 200.dp&#10;        val defaultHeight = diagramHeight ?: 120.dp&#10;        val boxModifier = Modifier.width(defaultWidth).height(defaultHeight).then(modifier) // caller modifier (if contains size) will override defaults&#10;        BoxWithConstraints(&#10;            modifier = boxModifier,&#10;            contentAlignment = Alignment.TopStart&#10;        ) {&#10;            val boxW = maxWidth&#10;            val boxH = maxHeight&#10;            val density = LocalDensity.current&#10;            val boxWpx = with(density) { boxW.toPx() }&#10;            val boxHpx = with(density) { boxH.toPx() }&#10;            val leftInsetPx = with(density) { uiParams.leftInsetDp.toPx() }&#10;            val openOffsetPx = with(density) { uiParams.openMarkerOffsetDp.toPx() }&#10;            val computedNutPx = uiParams.nutWidthDp?.let { with(density) { it.toPx() } } ?: (boxWpx * uiParams.nutWidthFactor)&#10;            val nutPx = if (firstFretIsNut) computedNutPx else 0f&#10;            val fretCount = 5&#10;            val stringCount = 6&#10;            // available width for frets = total width - leftInset - nut width&#10;            val availableWidth = (boxWpx - leftInsetPx - nutPx).coerceAtLeast(0f)&#10;            val fretSpacingPx = if (fretCount &gt; 0) availableWidth / fretCount else 0f&#10;            val stringSpacingPx = if (stringCount &gt; 1) boxHpx / (stringCount - 1) else boxHpx&#10;&#10;            Canvas(modifier = Modifier.matchParentSize()) {&#10;                // background&#10;                drawRect(Color.White, size = size)&#10;                // nut or vertical frets (shifted by leftInset)&#10;                for (f in 0..fretCount) {&#10;                    if (f == 0 &amp;&amp; firstFretIsNut) {&#10;                        drawRect(Color.Black, topLeft = Offset(leftInsetPx, 0f), size = androidx.compose.ui.geometry.Size(nutPx, size.height))&#10;                    } else {&#10;                        val x = leftInsetPx + nutPx + f * fretSpacingPx&#10;                        drawLine(Color.Gray, start = Offset(x, 0f), end = Offset(x, size.height), strokeWidth = with(density) { uiParams.verticalLineWidthDp.toPx() })&#10;                    }&#10;                }&#10;                // horizontal strings (start after leftInset)&#10;                for (s in 0 until stringCount) {&#10;                    val y = s * stringSpacingPx&#10;                    drawLine(Color.Gray, start = Offset(leftInsetPx, y), end = Offset(size.width, y), strokeWidth = with(density) { uiParams.horizontalLineWidthDp.toPx() })&#10;                }&#10;&#10;                // draw markers (circles + finger numbers) directly on Canvas for pixel-perfect positioning&#10;                positions.forEachIndexed { stringIdx, fretNum -&gt;&#10;                    val y = (stringCount - 1 - stringIdx) * stringSpacingPx&#10;                    when {&#10;                        fretNum &gt; 0 -&gt; {&#10;                            val x = leftInsetPx + nutPx + (fretNum - 0.5f) * fretSpacingPx&#10;                            // marker radius derived from UI params&#10;                            val radius = min(fretSpacingPx, stringSpacingPx) * uiParams.markerRadiusFactor&#10;                            drawCircle(color = Color(0xFF339CFF), center = Offset(x, y), radius = radius)&#10;                            val finger = fingers?.getOrNull(stringIdx) ?: 0&#10;                            if (finger &gt; 0) {&#10;                                // draw centered text using nativeCanvas&#10;                                drawContext.canvas.nativeCanvas.apply {&#10;                                    val paint = android.graphics.Paint().apply {&#10;                                        color = android.graphics.Color.WHITE&#10;                                        textSize = radius * uiParams.markerTextScale&#10;                                        isFakeBoldText = true&#10;                                        textAlign = android.graphics.Paint.Align.CENTER&#10;                                    }&#10;                                    val baseline = y + (paint.descent() - paint.ascent()) / 2 - paint.descent()&#10;                                    drawText(finger.toString(), x, baseline, paint)&#10;                                }&#10;                            }&#10;                        }&#10;                        fretNum == 0 -&gt; {&#10;                            // open string: draw outside left of nut (white fill + black stroke to be visible)&#10;                            val x = leftInsetPx - openOffsetPx&#10;                            val radius = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                            // Material-like thin open circle: transparent center with thin stroke&#10;                            val strokeWOpen = with(density) { uiParams.openMarkerStrokeDp.toPx() }&#10;                            drawCircle(color = Color.Transparent, center = Offset(x, y), radius = radius)&#10;                            drawCircle(color = Color.Black, center = Offset(x, y), radius = radius, style = androidx.compose.ui.graphics.drawscope.Stroke(width = strokeWOpen))&#10;                        }&#10;                        fretNum &lt; 0 -&gt; {&#10;                            // mute: draw an X symbol outside left of nut using two diagonal lines&#10;                            val x = leftInsetPx - openOffsetPx&#10;                            val size = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                            val half = size / 2f&#10;                            val strokeW = with(density) { uiParams.muteMarkerStrokeDp.toPx() }&#10;                            // draw a thinner X (centered) to match Material icon proportions&#10;                            val inset = half * 0.3f // make lines not touch the bounding box edges&#10;                            drawLine(Color.Black, start = Offset(x - half + inset, y - half + inset), end = Offset(x + half - inset, y + half - inset), strokeWidth = strokeW)&#10;                            drawLine(Color.Black, start = Offset(x - half + inset, y + half - inset), end = Offset(x + half - inset, y - half + inset), strokeWidth = strokeW)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FretboardDiagramOnly(&#10;    modifier: Modifier = Modifier,&#10;    uiParams: DiagramUiParams = DefaultDiagramUiParams,&#10;    stringStrokeWidthDp: Dp? = null,&#10;    positions: List&lt;Int&gt;? = null,&#10;    fingers: List&lt;Int&gt;? = null,&#10;    firstFretIsNut: Boolean = true&#10;) {&#10;    // Small variant: fills given modifier size&#10;    BoxWithConstraints(modifier = modifier, contentAlignment = Alignment.Center) {&#10;        val density = LocalDensity.current&#10;        val boxWpx = with(density) { maxWidth.toPx() }&#10;        val boxHpx = with(density) { maxHeight.toPx() }&#10;        val leftInsetPx = with(density) { uiParams.leftInsetDp.toPx() }&#10;        val openOffsetPx = with(density) { uiParams.openMarkerOffsetDp.toPx() }&#10;        val computedNutPx = uiParams.nutWidthDp?.let { with(density) { it.toPx() } } ?: (boxWpx * uiParams.nutWidthFactor)&#10;        val nutPx = if (firstFretIsNut) computedNutPx else 0f&#10;        val fretCount = 5&#10;        val stringCount = 6&#10;        val availableWidth = (boxWpx - leftInsetPx - nutPx).coerceAtLeast(0f)&#10;        val fretSpacingPx = if (fretCount &gt; 0) availableWidth / fretCount else 0f&#10;        val stringSpacingPx = if (stringCount &gt; 1) boxHpx / (stringCount - 1) else boxHpx&#10;&#10;        Canvas(modifier = Modifier.matchParentSize()) {&#10;             drawRect(Color.White, size = size)&#10;             for (f in 0..fretCount) {&#10;                 if (f == 0 &amp;&amp; firstFretIsNut) drawRect(Color.Black, topLeft = Offset(leftInsetPx, 0f), size = androidx.compose.ui.geometry.Size(nutPx, size.height))&#10;                 else {&#10;                     val x = leftInsetPx + nutPx + f * fretSpacingPx&#10;                     drawLine(Color.Black, start = Offset(x, 0f), end = Offset(x, size.height), strokeWidth = with(density) { uiParams.verticalLineWidthDp.toPx() })&#10;                 }&#10;             }&#10;              for (s in 0 until stringCount) {&#10;                  val y = s * stringSpacingPx&#10;                 drawLine(Color.Black, start = Offset(leftInsetPx, y), end = Offset(size.width, y), strokeWidth = stringStrokeWidthDp?.let { with(density) { it.toPx() } } ?: with(density) { uiParams.horizontalLineWidthDp.toPx() })&#10;              }&#10;&#10;             // draw markers directly on canvas (positions indexed low-&gt;high strings: [6th..1st])&#10;             positions?.let { posList -&gt;&#10;                 posList.forEachIndexed { si, fn -&gt;&#10;                     val y = (stringCount - 1 - si) * stringSpacingPx&#10;                     when {&#10;                         fn &gt; 0 -&gt; {&#10;                             val x = leftInsetPx + nutPx + (fn - 0.5f) * fretSpacingPx&#10;                             val radius = min(fretSpacingPx, stringSpacingPx) * uiParams.markerRadiusFactor&#10;                             drawCircle(color = Color(0xFF339CFF), center = Offset(x, y), radius = radius)&#10;                             val finger = fingers?.getOrNull(si) ?: 0&#10;                             if (finger &gt; 0) {&#10;                                 drawContext.canvas.nativeCanvas.apply {&#10;                                     val paint = android.graphics.Paint().apply {&#10;                                         color = android.graphics.Color.WHITE&#10;                                         textSize = radius * uiParams.markerTextScale&#10;                                         isFakeBoldText = true&#10;                                         textAlign = android.graphics.Paint.Align.CENTER&#10;                                     }&#10;                                     val baseline = y + (paint.descent() - paint.ascent()) / 2 - paint.descent()&#10;                                     drawText(finger.toString(), x, baseline, paint)&#10;                                 }&#10;                             }&#10;                         }&#10;                         fn == 0 -&gt; {&#10;                             val x = leftInsetPx - openOffsetPx&#10;                             val radius = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                             // Material-like thin open circle: transparent center with thin stroke&#10;                             val strokeWOpen = with(density) { uiParams.openMarkerStrokeDp.toPx() }&#10;                             drawCircle(color = Color.Transparent, center = Offset(x, y), radius = radius)&#10;                             drawCircle(color = Color.Black, center = Offset(x, y), radius = radius, style = androidx.compose.ui.graphics.drawscope.Stroke(width = strokeWOpen))&#10;                         }&#10;                         fn &lt; 0 -&gt; {&#10;                             val x = leftInsetPx - openOffsetPx&#10;                             val size = min(fretSpacingPx, stringSpacingPx) * 0.18f&#10;                             val half = size / 2f&#10;                             val strokeW = with(density) { uiParams.muteMarkerStrokeDp.toPx() }&#10;                             val inset = half * 0.3f&#10;                             drawLine(Color.Black, start = Offset(x - half + inset, y - half + inset), end = Offset(x + half - inset, y + half - inset), strokeWidth = strokeW)&#10;                             drawLine(Color.Black, start = Offset(x - half + inset, y + half - inset), end = Offset(x + half - inset, y - half + inset), strokeWidth = strokeW)&#10;                         }&#10;                     }&#10;                 }&#10;             }&#10;         }&#10;     }&#10; }&#10;&#10;@Preview(name = &quot;Fretboard Card Preview (single)&quot;, showBackground = true, widthDp = 360, heightDp = 240)&#10;@Composable&#10;fun PreviewFretboardCard_Single() {&#10;    val previewParams = DefaultDiagramUiParams.copy(nutWidthFactor = 0.06f)&#10;    Box(modifier = Modifier.fillMaxSize().padding(12.dp), contentAlignment = Alignment.TopCenter) {&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = previewParams&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/UIParameters.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/UIParameters.kt" />
              <option name="originalContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.layout.*&#10;&#10;/**&#10; * Diagram UI parameters to centralize visual tuning for fret diagrams.&#10; * Adjust defaults here to affect all diagrams that consume these params.&#10; */&#10;data class DiagramUiParams(&#10;    val nutWidthFactor: Float = 0.1f, // fraction of diagram width when nutWidthDp is null&#10;    val nutWidthDp: Dp? = null, // if set, overrides nutWidthFactor&#10;    val markerRadiusFactor: Float = 0.35f, // fraction of min(fretSpacing, stringSpacing)&#10;    val markerTextScale: Float = 1.2f, // multiplier for marker text size relative to radius&#10;    // left inset: space from the canvas left edge to the nut's left edge&#10;    val leftInsetDp: Dp = 8.dp,&#10;    // how far (center) outside the nut to place open/mute markers&#10;    val openMarkerOffsetDp: Dp = 8.dp,&#10;    val verticalLineWidthDp: Dp = 2.dp, // stroke for vertical frets&#10;    val horizontalLineWidthDp: Dp = 2.dp, // stroke for horizontal frets (strings)&#10;    val stringStrokeWidthDp: Dp = 1.6.dp // fallback stroke for strings if separately exposed&#10;)&#10;&#10;val DefaultDiagramUiParams = DiagramUiParams()&#10;&#10;// Note: This preview uses FretboardDiagramOnly from FretboardUi.kt to visually show uiParams&#10;@Preview(name = &quot;UIParams Preview&quot;, showBackground = true, widthDp = 360, heightDp = 200)&#10;@Composable&#10;fun Preview_UIParameters() {&#10;    val previewParams = DefaultDiagramUiParams.copy(&#10;        nutWidthFactor = 0.06f,&#10;        leftInsetDp = 18.dp,&#10;        openMarkerOffsetDp = 10.dp,&#10;        markerRadiusFactor = 0.45f,&#10;        horizontalLineWidthDp = 3.dp&#10;    )&#10;&#10;    // Preview uses the same FretboardCard as the app; no need to prepare positions/fingers here.&#10;    Box(modifier = Modifier.fillMaxSize().padding(8.dp), contentAlignment = Alignment.TopCenter) {&#10;        // render the same card preview as in FretboardUi&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = previewParams&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.layout.*&#10;&#10;/**&#10; * Diagram UI parameters to centralize visual tuning for fret diagrams.&#10; * Adjust defaults here to affect all diagrams that consume these params.&#10; */&#10;data class DiagramUiParams(&#10;    val nutWidthFactor: Float = 0.1f, // fraction of diagram width when nutWidthDp is null&#10;    val nutWidthDp: Dp? = null, // if set, overrides nutWidthFactor&#10;    val markerRadiusFactor: Float = 0.35f, // fraction of min(fretSpacing, stringSpacing)&#10;    val markerTextScale: Float = 1.2f, // multiplier for marker text size relative to radius&#10;    // left inset: space from the canvas left edge to the nut's left edge&#10;    val leftInsetDp: Dp = 8.dp,&#10;    // how far (center) outside the nut to place open/mute markers&#10;    val openMarkerOffsetDp: Dp = 8.dp,&#10;    // stroke widths for open/mute markers (allows material-like thin outlines)&#10;    val openMarkerStrokeDp: Dp = 1.dp,&#10;    val muteMarkerStrokeDp: Dp = 1.dp,&#10;    val verticalLineWidthDp: Dp = 2.dp, // stroke for vertical frets&#10;    val horizontalLineWidthDp: Dp = 2.dp, // stroke for horizontal frets (strings)&#10;    val stringStrokeWidthDp: Dp = 1.6.dp // fallback stroke for strings if separately exposed&#10;)&#10;&#10;val DefaultDiagramUiParams = DiagramUiParams()&#10;&#10;// Note: This preview uses FretboardDiagramOnly from FretboardUi.kt to visually show uiParams&#10;@Preview(name = &quot;UIParams Preview&quot;, showBackground = true, widthDp = 360, heightDp = 200)&#10;@Composable&#10;fun Preview_UIParameters() {&#10;    val previewParams = DefaultDiagramUiParams.copy(&#10;        nutWidthFactor = 0.06f,&#10;        leftInsetDp = 18.dp,&#10;        openMarkerOffsetDp = 10.dp,&#10;        markerRadiusFactor = 0.45f,&#10;        horizontalLineWidthDp = 3.dp&#10;    )&#10;&#10;    // Preview uses the same FretboardCard as the app; no need to prepare positions/fingers here.&#10;    Box(modifier = Modifier.fillMaxSize().padding(8.dp), contentAlignment = Alignment.TopCenter) {&#10;        // render the same card preview as in FretboardUi&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = previewParams&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>