<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/UIParameters.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sweetapps/pocketchord/UIParameters.kt" />
              <option name="originalContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.layout.*&#10;&#10;/**&#10; * Diagram UI parameters to centralize visual tuning for fret diagrams.&#10; * Adjust defaults here to affect all diagrams that consume these params.&#10; */&#10;data class DiagramUiParams(&#10;    val nutWidthFactor: Float = 0.03f, // fraction of diagram width when nutWidthDp is null&#10;    val nutWidthDp: Dp? = null, // if set, overrides nutWidthFactor&#10;    val markerRadiusFactor: Float = 0.35f, // fraction of min(fretSpacing, stringSpacing)&#10;    val markerTextScale: Float = 1.2f, // multiplier for marker text size relative to radius&#10;    // left inset: space from the canvas left edge to the nut's left edge&#10;    val leftInsetDp: Dp = 1.dp,&#10;    // how far (center) outside the nut to place open/mute markers&#10;    val openMarkerOffsetDp: Dp = 8.dp,&#10;    val muteMarkerOffsetDp: Dp = 8.dp,&#10;    // stroke widths for open/mute markers (allows material-like thin outlines)&#10;    val openMarkerStrokeDp: Dp = 1.dp,&#10;    val muteMarkerStrokeDp: Dp = 1.6.dp,&#10;    // size factors used separately for open and mute markers&#10;    val openMarkerSizeFactor: Float = 0.28f,&#10;    val muteMarkerSizeFactor: Float = 0.28f,&#10;    // inset factor applied when drawing the mute 'X' (fraction of half-size)&#10;    val muteMarkerInsetFactor: Float = 0.12f,&#10;    val verticalLineWidthDp: Dp = 2.dp, // stroke for vertical frets&#10;    val horizontalLineWidthDp: Dp = 2.dp, // stroke for horizontal frets (strings)&#10;    val stringStrokeWidthDp: Dp = 1.6.dp // fallback stroke for strings if separately exposed&#10;)&#10;&#10;val DefaultDiagramUiParams = DiagramUiParams()&#10;&#10;// Note: This preview uses FretboardDiagramOnly from FretboardUi.kt to visually show uiParams&#10;@Preview(name = &quot;UIParams Preview&quot;, showBackground = true, widthDp = 360, heightDp = 200)&#10;@Composable&#10;fun Preview_UIParameters() {&#10;    // Use the canonical defaults so Preview always reflects the current default parameters&#10;    Box(modifier = Modifier.fillMaxSize().padding(8.dp), contentAlignment = Alignment.TopCenter) {&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = DefaultDiagramUiParams&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sweetapps.pocketchord&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.layout.*&#10;&#10;/**&#10; * Diagram UI parameters to centralize visual tuning for fret diagrams.&#10; * Adjust defaults here to affect all diagrams that consume these params.&#10; */&#10;data class DiagramUiParams(&#10;    val nutWidthFactor: Float = 0.03f, // fraction of diagram width when nutWidthDp is null&#10;    val nutWidthDp: Dp? = null, // if set, overrides nutWidthFactor&#10;    val markerRadiusFactor: Float = 0.35f, // fraction of min(fretSpacing, stringSpacing)&#10;    val markerTextScale: Float = 1.2f, // multiplier for marker text size relative to radius&#10;    // left inset: space from the canvas left edge to the nut's left edge&#10;    val leftInsetDp: Dp = 1.dp,&#10;    // how far (center) outside the nut to place open/mute markers&#10;    val openMarkerOffsetDp: Dp = 8.dp,&#10;    val muteMarkerOffsetDp: Dp = 8.dp,&#10;    // stroke widths for open/mute markers (allows material-like thin outlines)&#10;    val openMarkerStrokeDp: Dp = 1.dp,&#10;    // make mute stroke similar to open by default to improve perceived weight&#10;    val muteMarkerStrokeDp: Dp = 1.dp,&#10;    // size factors used separately for open and mute markers&#10;    val openMarkerSizeFactor: Float = 0.28f,&#10;    val muteMarkerSizeFactor: Float = 0.28f,&#10;    // inset factor applied when drawing the mute 'X' (fraction of half-size)&#10;    // use zero inset by default so the 'X' diagonal matches the circle diameter visually&#10;    val muteMarkerInsetFactor: Float = 0f,&#10;    val verticalLineWidthDp: Dp = 2.dp, // stroke for vertical frets&#10;    val horizontalLineWidthDp: Dp = 2.dp, // stroke for horizontal frets (strings)&#10;    val stringStrokeWidthDp: Dp = 1.6.dp // fallback stroke for strings if separately exposed&#10;)&#10;&#10;val DefaultDiagramUiParams = DiagramUiParams()&#10;&#10;// Note: This preview uses FretboardDiagramOnly from FretboardUi.kt to visually show uiParams&#10;@Preview(name = &quot;UIParams Preview&quot;, showBackground = true, widthDp = 360, heightDp = 200)&#10;@Composable&#10;fun Preview_UIParameters() {&#10;    // Use the canonical defaults so Preview always reflects the current default parameters&#10;    Box(modifier = Modifier.fillMaxSize().padding(8.dp), contentAlignment = Alignment.TopCenter) {&#10;        FretboardCard(&#10;            chordName = &quot;C&quot;,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp),&#10;            uiParams = DefaultDiagramUiParams&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>